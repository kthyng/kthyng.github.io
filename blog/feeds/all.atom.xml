<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kristen M. Thyng, Ph.D.</title><link href="http://www.kristenthyng.com/blog/" rel="alternate"></link><link href="http://www.kristenthyng.com/blog/feeds/all.atom.xml" rel="self"></link><id>http://www.kristenthyng.com/blog/</id><updated>2013-11-26T17:00:00-06:00</updated><entry><title>Using Taskset</title><link href="http://www.kristenthyng.com/blog/2013/11/26/using-taskset/" rel="alternate"></link><updated>2013-11-26T17:00:00-06:00</updated><author><name>Kristen Thyng</name></author><id>tag:www.kristenthyng.com/blog,2013-11-26:2013/11/26/using-taskset/</id><summary type="html">&lt;p&gt;When I am running analysis or plotting scripts on a Linux workstation, I often employ "poor a man's" parallel processing: starting multiple instances of a script with different parameters to decrease the amount of time until I get my results. I have noticed that instead of nicely shifting each new process to a separate core on the workstation, sometimes the processes will get stacked on one core. I figured out how to manually move them around with a lot of googling one day, so I am hoping to save someone the same trouble. Note that this will not work on a Mac.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start your processes&lt;/li&gt;
&lt;li&gt;Find the process PIDs with &lt;code&gt;top&lt;/code&gt; or your favorite method&lt;/li&gt;
&lt;li&gt;Check which node the processes are running on with &lt;br&gt;
&lt;code&gt;taskset -p [PID]&lt;/code&gt; &lt;br&gt;
for each process PID&lt;/li&gt;
&lt;li&gt;If the node number is the same for multiple processes, you will want to change the node being used to spread them out. If your Linux machine has 12 nodes, choose a different number between 0 and 11 from the other process. Change the process node with&lt;br&gt;
&lt;code&gt;taskset -p [CORE NUMBER] [PID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Another check to &lt;code&gt;top&lt;/code&gt; should show that the processes are now each allowed to use 100% of the CPU per node instead of sharing.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>SciPy Conference and John Hunter Excellence in Plotting Competition</title><link href="http://www.kristenthyng.com/blog/2013/10/14/scipy-plotting-competition/" rel="alternate"></link><updated>2013-10-14T13:20:00-05:00</updated><author><name>Kristen Thyng</name></author><id>tag:www.kristenthyng.com/blog,2013-10-14:2013/10/14/scipy-plotting-competition/</id><summary type="html">&lt;p&gt;In June I attended my first SciPy conference. It was in Austin, TX, as usual. I wasn't sure what to expect, this being my first conference about a tool instead of research itself, but I enjoyed it. It was a great opportunity to meet people outside my immediate field and also to meet up with several in my own. I attended tutorials, the conference itself, and the sprints, and throughout, I learned of several new tools to try and about how to best do my research within the framework of open science and reproducibility, both themes of the conference.
&lt;br&gt;&lt;br&gt;
There was a plotting competition as part of the conference, the John Hunter Excellence in Plotting competition. I submitted a figure from my research and got second place! A gallery of the entries is &lt;a href="http://conference.scipy.org/jhepc2013/index.html"&gt;available online&lt;/a&gt;. As part of being ranked highly in the competition, I got to sit on the stage at the conference and participate in a panel on visualization practices.&lt;/p&gt;</summary><category term="visualization"></category><category term="plotting"></category><category term="SciPy"></category><category term="conference"></category></entry></feed>